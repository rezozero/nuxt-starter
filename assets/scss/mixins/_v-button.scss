@use 'sass:map';
@use 'sass:list';

// @mixin v-button-size() -- Include all CSS var values by size for specific variant
// @example v-button-size('sm', 'menu')
// --v-button-menu-font-size: 12px
@mixin v-button-size($size, $variant: default) {
    @if map-has-key($v-button-size-vars-by-variant, $variant) {
        $vars: map-get($v-button-size-vars-by-variant, $variant);

        @each $value in $vars {
            @if map-has-key($value, vars) and map-has-key($value, prefix) {
                @include v-button-css-vars-by-size(map-get($value, vars), $size, map-get($value, prefix));
            }
        }
    }
}

// @mixin v-button-css-vars-by-size() -- Include CSS var values by size for specific variant
@mixin v-button-css-vars-by-size($vars, $size, $prefix: '') {
    @include css-vars-by-size('v-button', $vars, $size, $prefix);
}


// @mixin v-button-css-vars() -- Set common and default size properties with the appropriate CSS var names and fallback values
//  {map} $vars: Object that is referencing for setting the properties
//  {string} $prefix: string to add between "v-button" default prefix and property name in CSS var
//  {string} $default: Object key that which set fallback value
// @example 
// returns font-size: var(--v-button-menu-font-size, rem(12));
// v-button-css-vars('sm', 'menu')
@mixin v-button-css-vars($vars, $prefix: '', $default: 'md') {
    @include default-css-vars('v-button', $vars, $prefix, 'common');
    @include default-css-vars('v-button', $vars, $prefix, $default);
}

// @mixin v-button-size() -- Include all css var value by size for specific variant
@mixin v-button-variant-css-vars($vars: $v-button-size-vars-by-variant, $name: '', $prefix: '') {
    @if map-has-key($vars, $name) {
        $variant-values: map.get($vars, $name);

        // Loop through variant template item
        @each $vars, $prefixes in $variant-values {
            $variant-prefix: nth($prefixes, 2);

            @if $variant-prefix == $prefix {
                @include v-button-css-vars(nth($vars, 2), $prefix);
            }
        }
    }
}
