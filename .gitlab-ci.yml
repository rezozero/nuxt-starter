stages:
    - build
    - release

# AutoDevOps templates for security
include:
    - template: Jobs/Secret-Detection.gitlab-ci.yml
    - template: Jobs/Dependency-Scanning.gitlab-ci.yml

build_merge_requests:
    stage: build
    image: docker:git
    only:
        - merge_requests
    services:
        - docker:dind
    variables:
        DOCKER_DRIVER: overlay2
        DOCKER_TLS_CERTDIR: "/certs"
        # Provide env vars for docker bake
        REGISTRY: ${CI_REGISTRY_IMAGE}
    when: on_success
    script:
        # Print docker image to be built with their args
        - "docker buildx bake --print"
        - "docker buildx bake"

build_develop:
    stage: build
    image: docker:git
    only:
        - develop
    services:
        - docker:dind
    variables:
        DOCKER_DRIVER: overlay2
        DOCKER_TLS_CERTDIR: "/certs"
        # Provide env vars for docker bake
        REGISTRY: ${CI_REGISTRY_IMAGE}
    when: on_success
    script:
        # Connect to your Gitlab Registry
        - "echo \"Registry image: ${CI_REGISTRY_IMAGE} for develop\""
        - "docker login -u gitlab-ci-token -p ${CI_JOB_TOKEN} ${CI_REGISTRY}"
        - "docker buildx bake --push"

build_production:
    stage: build
    image: docker:git
    only:
        - tags
    services:
        - docker:dind
    variables:
        DOCKER_DRIVER: overlay2
        DOCKER_TLS_CERTDIR: "/certs"
        # Provide env vars for docker bake
        VERSION: ${CI_COMMIT_TAG}
        REGISTRY: ${CI_REGISTRY_IMAGE}
    when: on_success
    script:
        # Connect to your Gitlab Registry
        - "echo \"Registry image: ${CI_REGISTRY_IMAGE} for tag ${CI_COMMIT_TAG}\""
        - "docker login -u gitlab-ci-token -p ${CI_JOB_TOKEN} ${CI_REGISTRY}"
        - "docker buildx bake --push"

# ==========================================
# Create release on Gitlab repository
# ==========================================
create_gitlab_release:
    stage: release
    image: registry.gitlab.com/gitlab-org/release-cli:latest
    rules:
        - if: $CI_COMMIT_TAG
    script:
        - echo "Running the release job."
    needs: [ "build_production" ]
    when: on_success
    release:
        tag_name: $CI_COMMIT_TAG
        name: 'Release $CI_COMMIT_TAG'
        description: './CHANGELOG.md'
