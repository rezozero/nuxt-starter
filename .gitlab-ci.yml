image: node:14

stages:
    - build
    - docker

.cache: &cache
    cache:
        key:
            files:
                - yarn.lock
        paths:
            - node_modules

# ===========
# SSR STAGING
# ===========
ssr_build_develop:
    stage: build
    interruptible: true
    <<: *cache
    only:
        - develop
    artifacts:
        expire_in: 1 hour
        paths:
            - .nuxt/
            - node_modules/
    script:
        - yarn install --pure-lockfile
        - yarn build

ssr_docker_develop:
    stage: docker
    only:
        - develop
    image: docker:git
    services:
        - docker:dind
    when: on_success
    needs: [ "ssr_build_develop" ]
    dependencies: [ "ssr_build_develop" ]
    script:
        - "docker login -u gitlab-ci-token -p ${CI_BUILD_TOKEN} ${CI_REGISTRY}"
        # App image build
        - "docker build -t ${CI_REGISTRY_IMAGE}/node -f .docker/node/Dockerfile ."
        - "docker tag ${CI_REGISTRY_IMAGE}/node ${CI_REGISTRY_IMAGE}/node:develop"
        - "docker push ${CI_REGISTRY_IMAGE}/node:develop"
        # NGINX image build
        - "docker build -t ${CI_REGISTRY_IMAGE}/nginx -f .docker/nginx/Dockerfile ."
        - "docker tag ${CI_REGISTRY_IMAGE}/nginx ${CI_REGISTRY_IMAGE}/nginx:develop"
        - "docker push ${CI_REGISTRY_IMAGE}/nginx:develop"
        # Varnish image build
        - "docker build -t ${CI_REGISTRY_IMAGE}/varnish -f .docker/varnish/Dockerfile ."
        - "docker tag ${CI_REGISTRY_IMAGE}/varnish ${CI_REGISTRY_IMAGE}/varnish:develop"
        - "docker push ${CI_REGISTRY_IMAGE}/varnish:develop"

# ========
# SSR PROD
# ========
ssr_build_tags:
    stage: build
    interruptible: true
    <<: *cache
    only:
        - tags
    artifacts:
        expire_in: 1 hour
        paths:
            - .nuxt/
            - node_modules/
    script:
        - yarn install --pure-lockfile
        - yarn build

ssr_docker_tags:
    stage: docker
    only:
        - tags
    image: docker:git
    services:
        - docker:dind
    when: on_success
    needs: [ "ssr_build_tags" ]
    dependencies: [ "ssr_build_tags" ]
    script:
        # Connect to your Gitlab Registry
        - "docker login -u gitlab-ci-token -p ${CI_BUILD_TOKEN} ${CI_REGISTRY}"
        # App image build
        - "docker build -t ${CI_REGISTRY_IMAGE}/node -f .docker/node/Dockerfile ."
        - "docker tag ${CI_REGISTRY_IMAGE}/node ${CI_REGISTRY_IMAGE}/node:${CI_COMMIT_TAG}"
        - "docker push ${CI_REGISTRY_IMAGE}/node:latest"
        - "docker push ${CI_REGISTRY_IMAGE}/node:${CI_COMMIT_TAG}"
        # NGINX image build
        - "docker build -t ${CI_REGISTRY_IMAGE}/nginx -f .docker/nginx/Dockerfile ."
        - "docker tag ${CI_REGISTRY_IMAGE}/nginx ${CI_REGISTRY_IMAGE}/nginx:${CI_COMMIT_TAG}"
        - "docker push ${CI_REGISTRY_IMAGE}/nginx:latest"
        - "docker push ${CI_REGISTRY_IMAGE}/nginx:${CI_COMMIT_TAG}"
        # Varnish image build
        - "docker build -t ${CI_REGISTRY_IMAGE}/varnish -f .docker/varnish/Dockerfile ."
        - "docker tag ${CI_REGISTRY_IMAGE}/varnish ${CI_REGISTRY_IMAGE}/varnish:${CI_COMMIT_TAG}"
        - "docker push ${CI_REGISTRY_IMAGE}/varnish:latest"
        - "docker push ${CI_REGISTRY_IMAGE}/varnish:${CI_COMMIT_TAG}"


# ===================
# Static site STAGING
# ===================
#static_build_develop:
#    stage: build
#    interruptible: true
#    <<: *cache
#    only:
#        - develop
#    artifacts:
#        expire_in: 1 hour
#        paths:
#            - dist/
#    script:
#        ## Use Gitlab CI/CD secrets to store your API key.
#        - echo "$API_KEY"
#        # Static site generation requires a .env.test
#        - cp .env.test .env
#        - yarn install --pure-lockfile
#        - yarn generate
#
#static_docker_develop:
#    stage: docker
#    only:
#        - develop
#    image: docker:git
#    services:
#        - docker:dind
#    when: on_success
#    needs: [ "static_build_develop" ]
#    dependencies: [ "static_build_develop" ]
#    script:
#        # Connect to your Gitlab Registry
#        - "echo \"Registry image: ${CI_REGISTRY_IMAGE} for develop\""
#        - "docker login -u gitlab-ci-token -p ${CI_BUILD_TOKEN} ${CI_REGISTRY}"
#        # App image build
#        - "docker build -t ${CI_REGISTRY_IMAGE} -f .docker/nginx-static/Dockerfile ."
#        - "docker tag ${CI_REGISTRY_IMAGE} ${CI_REGISTRY_IMAGE}:develop"
#        - "docker push ${CI_REGISTRY_IMAGE}:develop"


# ================
# Static site PROD
# ================
#static_build_tags:
#    stage: build
#    interruptible: true
#    <<: *cache
#    only:
#        - tags
#    artifacts:
#        expire_in: 1 hour
#        paths:
#            - dist/
#    script:
#        ## Use Gitlab CI/CD secrets to store your API key.
#        - echo "$API_KEY"
#        # Static site generation requires a .env.prod
#        - cp .env.prod .env
#        - yarn install --pure-lockfile
#        - yarn generate
#
#static_docker_tags:
#    stage: docker
#    only:
#        - tags
#    image: docker:git
#    services:
#        - docker:dind
#    when: on_success
#    needs: [ "static_build_tags" ]
#    dependencies: [ "static_build_tags" ]
#    script:
#        # Connect to your Gitlab Registry
#        - "echo \"Registry image: ${CI_REGISTRY_IMAGE} for ${CI_COMMIT_TAG}\""
#        - "docker login -u gitlab-ci-token -p ${CI_BUILD_TOKEN} ${CI_REGISTRY}"
#        # App image build
#        - "docker build -t ${CI_REGISTRY_IMAGE} -f .docker/nginx-static/Dockerfile ."
#        - "docker tag ${CI_REGISTRY_IMAGE} ${CI_REGISTRY_IMAGE}:${CI_COMMIT_TAG}"
#        - "docker push ${CI_REGISTRY_IMAGE}:latest"
#        - "docker push ${CI_REGISTRY_IMAGE}:${CI_COMMIT_TAG}"
